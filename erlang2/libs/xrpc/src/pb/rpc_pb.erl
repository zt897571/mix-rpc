%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.20.0
%% Version source: file
-module(rpc_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("rpc_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'xgame.process_msg'() :: #'xgame.process_msg'{}.

-type 'xgame.pb_mfa'() :: #'xgame.pb_mfa'{}.

-type 'xgame.rpc_params'() :: #'xgame.rpc_params'{}.

-type 'xgame.req_message'() :: #'xgame.req_message'{}.

-type 'xgame.reply_message'() :: #'xgame.reply_message'{}.

-type 'xgame.req_verify'() :: #'xgame.req_verify'{}.

-type 'xgame.reply_verify'() :: #'xgame.reply_verify'{}.

-export_type(['xgame.process_msg'/0, 'xgame.pb_mfa'/0, 'xgame.rpc_params'/0, 'xgame.req_message'/0, 'xgame.reply_message'/0, 'xgame.req_verify'/0, 'xgame.reply_verify'/0]).
-type '$msg_name'() :: 'xgame.process_msg' | 'xgame.pb_mfa' | 'xgame.rpc_params' | 'xgame.req_message' | 'xgame.reply_message' | 'xgame.req_verify' | 'xgame.reply_verify'.
-type '$msg'() :: 'xgame.process_msg'() | 'xgame.pb_mfa'() | 'xgame.rpc_params'() | 'xgame.req_message'() | 'xgame.reply_message'() | 'xgame.req_verify'() | 'xgame.reply_verify'().
-export_type(['$msg_name'/0, '$msg'/0]).

-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'xgame.process_msg' -> 'encode_msg_xgame.process_msg'(id(Msg, TrUserData), TrUserData);
        'xgame.pb_mfa' -> 'encode_msg_xgame.pb_mfa'(id(Msg, TrUserData), TrUserData);
        'xgame.rpc_params' -> 'encode_msg_xgame.rpc_params'(id(Msg, TrUserData), TrUserData);
        'xgame.req_message' -> 'encode_msg_xgame.req_message'(id(Msg, TrUserData), TrUserData);
        'xgame.reply_message' -> 'encode_msg_xgame.reply_message'(id(Msg, TrUserData), TrUserData);
        'xgame.req_verify' -> 'encode_msg_xgame.req_verify'(id(Msg, TrUserData), TrUserData);
        'xgame.reply_verify' -> 'encode_msg_xgame.reply_verify'(id(Msg, TrUserData), TrUserData)
    end.


'encode_msg_xgame.process_msg'(Msg, TrUserData) -> 'encode_msg_xgame.process_msg'(Msg, <<>>, TrUserData).


'encode_msg_xgame.process_msg'(#'xgame.process_msg'{source = F1, target = F2, params = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= undefined -> B2;
                  true -> 'e_mfield_xgame.process_msg_params'(TrF3, <<B2/binary, 26>>, TrUserData)
               end
           end
    end.

'encode_msg_xgame.pb_mfa'(Msg, TrUserData) -> 'encode_msg_xgame.pb_mfa'(Msg, <<>>, TrUserData).


'encode_msg_xgame.pb_mfa'(#'xgame.pb_mfa'{module = F1, function = F2, args = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case is_empty_string(TrF2) of
                        true -> B1;
                        false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= undefined -> B2;
                  true -> 'e_mfield_xgame.pb_mfa_args'(TrF3, <<B2/binary, 26>>, TrUserData)
               end
           end
    end.

'encode_msg_xgame.rpc_params'(Msg, TrUserData) -> 'encode_msg_xgame.rpc_params'(Msg, <<>>, TrUserData).


'encode_msg_xgame.rpc_params'(#'xgame.rpc_params'{msgName = F1, payload = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

'encode_msg_xgame.req_message'(Msg, TrUserData) -> 'encode_msg_xgame.req_message'(Msg, <<>>, TrUserData).


'encode_msg_xgame.req_message'(#'xgame.req_message'{node_msg = F1, process_msg = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= undefined -> Bin;
                       true -> 'e_mfield_xgame.req_message_node_msg'(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= undefined -> B1;
                  true -> 'e_mfield_xgame.req_message_process_msg'(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

'encode_msg_xgame.reply_message'(Msg, TrUserData) -> 'encode_msg_xgame.reply_message'(Msg, <<>>, TrUserData).


'encode_msg_xgame.reply_message'(#'xgame.reply_message'{msgName = F1, payload = F2, error = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               case is_empty_string(TrF3) of
                   true -> B2;
                   false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
               end
           end
    end.

'encode_msg_xgame.req_verify'(Msg, TrUserData) -> 'encode_msg_xgame.req_verify'(Msg, <<>>, TrUserData).


'encode_msg_xgame.req_verify'(#'xgame.req_verify'{node = F1, cookie = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case is_empty_string(TrF2) of
                   true -> B1;
                   false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

'encode_msg_xgame.reply_verify'(Msg, TrUserData) -> 'encode_msg_xgame.reply_verify'(Msg, <<>>, TrUserData).


'encode_msg_xgame.reply_verify'(#'xgame.reply_verify'{node = F1, error = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case is_empty_string(TrF2) of
                   true -> B1;
                   false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

'e_mfield_xgame.process_msg_params'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_xgame.rpc_params'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_xgame.pb_mfa_args'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_xgame.rpc_params'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_xgame.req_message_node_msg'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_xgame.pb_mfa'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_xgame.req_message_process_msg'(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_xgame.process_msg'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('xgame.process_msg', Bin, TrUserData) -> id('decode_msg_xgame.process_msg'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('xgame.pb_mfa', Bin, TrUserData) -> id('decode_msg_xgame.pb_mfa'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('xgame.rpc_params', Bin, TrUserData) -> id('decode_msg_xgame.rpc_params'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('xgame.req_message', Bin, TrUserData) -> id('decode_msg_xgame.req_message'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('xgame.reply_message', Bin, TrUserData) -> id('decode_msg_xgame.reply_message'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('xgame.req_verify', Bin, TrUserData) -> id('decode_msg_xgame.req_verify'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('xgame.reply_verify', Bin, TrUserData) -> id('decode_msg_xgame.reply_verify'(Bin, TrUserData), TrUserData).



'decode_msg_xgame.process_msg'(Bin, TrUserData) -> 'dfp_read_field_def_xgame.process_msg'(Bin, 0, 0, 0, id(<<>>, TrUserData), id(<<>>, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_xgame.process_msg'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_xgame.process_msg_source'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_xgame.process_msg'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_xgame.process_msg_target'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_xgame.process_msg'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_xgame.process_msg_params'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_xgame.process_msg'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'xgame.process_msg'{source = F@_1, target = F@_2, params = F@_3};
'dfp_read_field_def_xgame.process_msg'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_xgame.process_msg'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_xgame.process_msg'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_xgame.process_msg'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_xgame.process_msg'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_xgame.process_msg_source'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> 'd_field_xgame.process_msg_target'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> 'd_field_xgame.process_msg_params'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_xgame.process_msg'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_xgame.process_msg'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_xgame.process_msg'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_xgame.process_msg'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_xgame.process_msg'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_xgame.process_msg'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'xgame.process_msg'{source = F@_1, target = F@_2, params = F@_3}.

'd_field_xgame.process_msg_source'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_xgame.process_msg_source'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_xgame.process_msg_source'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.process_msg'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_xgame.process_msg_target'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_xgame.process_msg_target'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_xgame.process_msg_target'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.process_msg'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

'd_field_xgame.process_msg_params'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_xgame.process_msg_params'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_xgame.process_msg_params'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_xgame.rpc_params'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.process_msg'(RestF,
                                           0,
                                           0,
                                           F,
                                           F@_1,
                                           F@_2,
                                           if Prev == undefined -> NewFValue;
                                              true -> 'merge_msg_xgame.rpc_params'(Prev, NewFValue, TrUserData)
                                           end,
                                           TrUserData).

'skip_varint_xgame.process_msg'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_xgame.process_msg'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_xgame.process_msg'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_xgame.process_msg'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_xgame.process_msg'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'skip_length_delimited_xgame.process_msg'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_xgame.process_msg'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_xgame.process_msg'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_xgame.process_msg'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_xgame.process_msg'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_xgame.process_msg'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_xgame.process_msg'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_xgame.process_msg'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_xgame.process_msg'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_xgame.pb_mfa'(Bin, TrUserData) -> 'dfp_read_field_def_xgame.pb_mfa'(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_xgame.pb_mfa'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_xgame.pb_mfa_module'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_xgame.pb_mfa'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_xgame.pb_mfa_function'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_xgame.pb_mfa'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_xgame.pb_mfa_args'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_xgame.pb_mfa'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'xgame.pb_mfa'{module = F@_1, function = F@_2, args = F@_3};
'dfp_read_field_def_xgame.pb_mfa'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_xgame.pb_mfa'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_xgame.pb_mfa'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_xgame.pb_mfa'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_xgame.pb_mfa'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_xgame.pb_mfa_module'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> 'd_field_xgame.pb_mfa_function'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> 'd_field_xgame.pb_mfa_args'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_xgame.pb_mfa'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_xgame.pb_mfa'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_xgame.pb_mfa'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_xgame.pb_mfa'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_xgame.pb_mfa'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_xgame.pb_mfa'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'xgame.pb_mfa'{module = F@_1, function = F@_2, args = F@_3}.

'd_field_xgame.pb_mfa_module'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_xgame.pb_mfa_module'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_xgame.pb_mfa_module'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.pb_mfa'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_xgame.pb_mfa_function'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_xgame.pb_mfa_function'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_xgame.pb_mfa_function'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.pb_mfa'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

'd_field_xgame.pb_mfa_args'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_xgame.pb_mfa_args'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_xgame.pb_mfa_args'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_xgame.rpc_params'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.pb_mfa'(RestF,
                                      0,
                                      0,
                                      F,
                                      F@_1,
                                      F@_2,
                                      if Prev == undefined -> NewFValue;
                                         true -> 'merge_msg_xgame.rpc_params'(Prev, NewFValue, TrUserData)
                                      end,
                                      TrUserData).

'skip_varint_xgame.pb_mfa'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_xgame.pb_mfa'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_xgame.pb_mfa'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_xgame.pb_mfa'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_xgame.pb_mfa'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'skip_length_delimited_xgame.pb_mfa'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_xgame.pb_mfa'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_xgame.pb_mfa'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_xgame.pb_mfa'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_xgame.pb_mfa'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_xgame.pb_mfa'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_xgame.pb_mfa'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_xgame.pb_mfa'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_xgame.pb_mfa'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_xgame.rpc_params'(Bin, TrUserData) -> 'dfp_read_field_def_xgame.rpc_params'(Bin, 0, 0, 0, id([], TrUserData), id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_xgame.rpc_params'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_xgame.rpc_params_msgName'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_xgame.rpc_params'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_xgame.rpc_params_payload'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_xgame.rpc_params'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'xgame.rpc_params'{msgName = F@_1, payload = F@_2};
'dfp_read_field_def_xgame.rpc_params'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_xgame.rpc_params'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_xgame.rpc_params'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_xgame.rpc_params'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_xgame.rpc_params'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_xgame.rpc_params_msgName'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_xgame.rpc_params_payload'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_xgame.rpc_params'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_xgame.rpc_params'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_xgame.rpc_params'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_xgame.rpc_params'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_xgame.rpc_params'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_xgame.rpc_params'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'xgame.rpc_params'{msgName = F@_1, payload = F@_2}.

'd_field_xgame.rpc_params_msgName'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_xgame.rpc_params_msgName'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_xgame.rpc_params_msgName'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.rpc_params'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_xgame.rpc_params_payload'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_xgame.rpc_params_payload'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_xgame.rpc_params_payload'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.rpc_params'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_xgame.rpc_params'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_xgame.rpc_params'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_xgame.rpc_params'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_xgame.rpc_params'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_xgame.rpc_params'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_xgame.rpc_params'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_xgame.rpc_params'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_xgame.rpc_params'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_xgame.rpc_params'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_xgame.rpc_params'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_xgame.rpc_params'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_xgame.rpc_params'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_xgame.rpc_params'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_xgame.rpc_params'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_xgame.req_message'(Bin, TrUserData) -> 'dfp_read_field_def_xgame.req_message'(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_xgame.req_message'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_xgame.req_message_node_msg'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_xgame.req_message'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_xgame.req_message_process_msg'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_xgame.req_message'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'xgame.req_message'{node_msg = F@_1, process_msg = F@_2};
'dfp_read_field_def_xgame.req_message'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_xgame.req_message'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_xgame.req_message'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_xgame.req_message'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_xgame.req_message'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_xgame.req_message_node_msg'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_xgame.req_message_process_msg'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_xgame.req_message'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_xgame.req_message'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_xgame.req_message'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_xgame.req_message'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_xgame.req_message'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_xgame.req_message'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'xgame.req_message'{node_msg = F@_1, process_msg = F@_2}.

'd_field_xgame.req_message_node_msg'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_xgame.req_message_node_msg'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_xgame.req_message_node_msg'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_xgame.pb_mfa'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.req_message'(RestF,
                                           0,
                                           0,
                                           F,
                                           if Prev == undefined -> NewFValue;
                                              true -> 'merge_msg_xgame.pb_mfa'(Prev, NewFValue, TrUserData)
                                           end,
                                           F@_2,
                                           TrUserData).

'd_field_xgame.req_message_process_msg'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_xgame.req_message_process_msg'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_xgame.req_message_process_msg'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_xgame.process_msg'(Bs, TrUserData), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.req_message'(RestF,
                                           0,
                                           0,
                                           F,
                                           F@_1,
                                           if Prev == undefined -> NewFValue;
                                              true -> 'merge_msg_xgame.process_msg'(Prev, NewFValue, TrUserData)
                                           end,
                                           TrUserData).

'skip_varint_xgame.req_message'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_xgame.req_message'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_xgame.req_message'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_xgame.req_message'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_xgame.req_message'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_xgame.req_message'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_xgame.req_message'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_xgame.req_message'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_xgame.req_message'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_xgame.req_message'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_xgame.req_message'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_xgame.req_message'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_xgame.req_message'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_xgame.req_message'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_xgame.reply_message'(Bin, TrUserData) -> 'dfp_read_field_def_xgame.reply_message'(Bin, 0, 0, 0, id([], TrUserData), id(<<>>, TrUserData), id([], TrUserData), TrUserData).

'dfp_read_field_def_xgame.reply_message'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_xgame.reply_message_msgName'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_xgame.reply_message'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_xgame.reply_message_payload'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_xgame.reply_message'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'd_field_xgame.reply_message_error'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_xgame.reply_message'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'xgame.reply_message'{msgName = F@_1, payload = F@_2, error = F@_3};
'dfp_read_field_def_xgame.reply_message'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dg_read_field_def_xgame.reply_message'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'dg_read_field_def_xgame.reply_message'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_xgame.reply_message'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'dg_read_field_def_xgame.reply_message'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_xgame.reply_message_msgName'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> 'd_field_xgame.reply_message_payload'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> 'd_field_xgame.reply_message_error'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_xgame.reply_message'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> 'skip_64_xgame.reply_message'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> 'skip_length_delimited_xgame.reply_message'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> 'skip_group_xgame.reply_message'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> 'skip_32_xgame.reply_message'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
'dg_read_field_def_xgame.reply_message'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'xgame.reply_message'{msgName = F@_1, payload = F@_2, error = F@_3}.

'd_field_xgame.reply_message_msgName'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_xgame.reply_message_msgName'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_xgame.reply_message_msgName'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.reply_message'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

'd_field_xgame.reply_message_payload'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_xgame.reply_message_payload'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_xgame.reply_message_payload'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.reply_message'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

'd_field_xgame.reply_message_error'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'd_field_xgame.reply_message_error'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'd_field_xgame.reply_message_error'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.reply_message'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

'skip_varint_xgame.reply_message'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'skip_varint_xgame.reply_message'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
'skip_varint_xgame.reply_message'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_xgame.reply_message'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_length_delimited_xgame.reply_message'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> 'skip_length_delimited_xgame.reply_message'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
'skip_length_delimited_xgame.reply_message'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_xgame.reply_message'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

'skip_group_xgame.reply_message'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_xgame.reply_message'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

'skip_32_xgame.reply_message'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_xgame.reply_message'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'skip_64_xgame.reply_message'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> 'dfp_read_field_def_xgame.reply_message'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_xgame.req_verify'(Bin, TrUserData) -> 'dfp_read_field_def_xgame.req_verify'(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), TrUserData).

'dfp_read_field_def_xgame.req_verify'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_xgame.req_verify_node'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_xgame.req_verify'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_xgame.req_verify_cookie'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_xgame.req_verify'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'xgame.req_verify'{node = F@_1, cookie = F@_2};
'dfp_read_field_def_xgame.req_verify'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_xgame.req_verify'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_xgame.req_verify'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_xgame.req_verify'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_xgame.req_verify'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_xgame.req_verify_node'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_xgame.req_verify_cookie'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_xgame.req_verify'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_xgame.req_verify'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_xgame.req_verify'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_xgame.req_verify'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_xgame.req_verify'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_xgame.req_verify'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'xgame.req_verify'{node = F@_1, cookie = F@_2}.

'd_field_xgame.req_verify_node'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_xgame.req_verify_node'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_xgame.req_verify_node'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.req_verify'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_xgame.req_verify_cookie'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_xgame.req_verify_cookie'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_xgame.req_verify_cookie'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.req_verify'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_xgame.req_verify'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_xgame.req_verify'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_xgame.req_verify'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_xgame.req_verify'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_xgame.req_verify'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_xgame.req_verify'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_xgame.req_verify'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_xgame.req_verify'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_xgame.req_verify'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_xgame.req_verify'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_xgame.req_verify'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_xgame.req_verify'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_xgame.req_verify'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_xgame.req_verify'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'decode_msg_xgame.reply_verify'(Bin, TrUserData) -> 'dfp_read_field_def_xgame.reply_verify'(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), TrUserData).

'dfp_read_field_def_xgame.reply_verify'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_xgame.reply_verify_node'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_xgame.reply_verify'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_xgame.reply_verify_error'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_xgame.reply_verify'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'xgame.reply_verify'{node = F@_1, error = F@_2};
'dfp_read_field_def_xgame.reply_verify'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_xgame.reply_verify'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_xgame.reply_verify'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_xgame.reply_verify'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_xgame.reply_verify'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_xgame.reply_verify_node'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> 'd_field_xgame.reply_verify_error'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_xgame.reply_verify'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_xgame.reply_verify'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_xgame.reply_verify'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_xgame.reply_verify'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_xgame.reply_verify'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_xgame.reply_verify'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'xgame.reply_verify'{node = F@_1, error = F@_2}.

'd_field_xgame.reply_verify_node'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_xgame.reply_verify_node'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_xgame.reply_verify_node'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.reply_verify'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_xgame.reply_verify_error'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_xgame.reply_verify_error'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_xgame.reply_verify_error'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_xgame.reply_verify'(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

'skip_varint_xgame.reply_verify'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_xgame.reply_verify'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_xgame.reply_verify'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_xgame.reply_verify'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_xgame.reply_verify'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_xgame.reply_verify'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_xgame.reply_verify'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_xgame.reply_verify'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_xgame.reply_verify'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_xgame.reply_verify'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_xgame.reply_verify'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_xgame.reply_verify'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_xgame.reply_verify'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_xgame.reply_verify'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'xgame.process_msg' -> 'merge_msg_xgame.process_msg'(Prev, New, TrUserData);
        'xgame.pb_mfa' -> 'merge_msg_xgame.pb_mfa'(Prev, New, TrUserData);
        'xgame.rpc_params' -> 'merge_msg_xgame.rpc_params'(Prev, New, TrUserData);
        'xgame.req_message' -> 'merge_msg_xgame.req_message'(Prev, New, TrUserData);
        'xgame.reply_message' -> 'merge_msg_xgame.reply_message'(Prev, New, TrUserData);
        'xgame.req_verify' -> 'merge_msg_xgame.req_verify'(Prev, New, TrUserData);
        'xgame.reply_verify' -> 'merge_msg_xgame.reply_verify'(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,'merge_msg_xgame.process_msg'/3}).
'merge_msg_xgame.process_msg'(#'xgame.process_msg'{source = PFsource, target = PFtarget, params = PFparams}, #'xgame.process_msg'{source = NFsource, target = NFtarget, params = NFparams}, TrUserData) ->
    #'xgame.process_msg'{source =
                             if NFsource =:= undefined -> PFsource;
                                true -> NFsource
                             end,
                         target =
                             if NFtarget =:= undefined -> PFtarget;
                                true -> NFtarget
                             end,
                         params =
                             if PFparams /= undefined, NFparams /= undefined -> 'merge_msg_xgame.rpc_params'(PFparams, NFparams, TrUserData);
                                PFparams == undefined -> NFparams;
                                NFparams == undefined -> PFparams
                             end}.

-compile({nowarn_unused_function,'merge_msg_xgame.pb_mfa'/3}).
'merge_msg_xgame.pb_mfa'(#'xgame.pb_mfa'{module = PFmodule, function = PFfunction, args = PFargs}, #'xgame.pb_mfa'{module = NFmodule, function = NFfunction, args = NFargs}, TrUserData) ->
    #'xgame.pb_mfa'{module =
                        if NFmodule =:= undefined -> PFmodule;
                           true -> NFmodule
                        end,
                    function =
                        if NFfunction =:= undefined -> PFfunction;
                           true -> NFfunction
                        end,
                    args =
                        if PFargs /= undefined, NFargs /= undefined -> 'merge_msg_xgame.rpc_params'(PFargs, NFargs, TrUserData);
                           PFargs == undefined -> NFargs;
                           NFargs == undefined -> PFargs
                        end}.

-compile({nowarn_unused_function,'merge_msg_xgame.rpc_params'/3}).
'merge_msg_xgame.rpc_params'(#'xgame.rpc_params'{msgName = PFmsgName, payload = PFpayload}, #'xgame.rpc_params'{msgName = NFmsgName, payload = NFpayload}, _) ->
    #'xgame.rpc_params'{msgName =
                            if NFmsgName =:= undefined -> PFmsgName;
                               true -> NFmsgName
                            end,
                        payload =
                            if NFpayload =:= undefined -> PFpayload;
                               true -> NFpayload
                            end}.

-compile({nowarn_unused_function,'merge_msg_xgame.req_message'/3}).
'merge_msg_xgame.req_message'(#'xgame.req_message'{node_msg = PFnode_msg, process_msg = PFprocess_msg}, #'xgame.req_message'{node_msg = NFnode_msg, process_msg = NFprocess_msg}, TrUserData) ->
    #'xgame.req_message'{node_msg =
                             if PFnode_msg /= undefined, NFnode_msg /= undefined -> 'merge_msg_xgame.pb_mfa'(PFnode_msg, NFnode_msg, TrUserData);
                                PFnode_msg == undefined -> NFnode_msg;
                                NFnode_msg == undefined -> PFnode_msg
                             end,
                         process_msg =
                             if PFprocess_msg /= undefined, NFprocess_msg /= undefined -> 'merge_msg_xgame.process_msg'(PFprocess_msg, NFprocess_msg, TrUserData);
                                PFprocess_msg == undefined -> NFprocess_msg;
                                NFprocess_msg == undefined -> PFprocess_msg
                             end}.

-compile({nowarn_unused_function,'merge_msg_xgame.reply_message'/3}).
'merge_msg_xgame.reply_message'(#'xgame.reply_message'{msgName = PFmsgName, payload = PFpayload, error = PFerror}, #'xgame.reply_message'{msgName = NFmsgName, payload = NFpayload, error = NFerror}, _) ->
    #'xgame.reply_message'{msgName =
                               if NFmsgName =:= undefined -> PFmsgName;
                                  true -> NFmsgName
                               end,
                           payload =
                               if NFpayload =:= undefined -> PFpayload;
                                  true -> NFpayload
                               end,
                           error =
                               if NFerror =:= undefined -> PFerror;
                                  true -> NFerror
                               end}.

-compile({nowarn_unused_function,'merge_msg_xgame.req_verify'/3}).
'merge_msg_xgame.req_verify'(#'xgame.req_verify'{node = PFnode, cookie = PFcookie}, #'xgame.req_verify'{node = NFnode, cookie = NFcookie}, _) ->
    #'xgame.req_verify'{node =
                            if NFnode =:= undefined -> PFnode;
                               true -> NFnode
                            end,
                        cookie =
                            if NFcookie =:= undefined -> PFcookie;
                               true -> NFcookie
                            end}.

-compile({nowarn_unused_function,'merge_msg_xgame.reply_verify'/3}).
'merge_msg_xgame.reply_verify'(#'xgame.reply_verify'{node = PFnode, error = PFerror}, #'xgame.reply_verify'{node = NFnode, error = NFerror}, _) ->
    #'xgame.reply_verify'{node =
                              if NFnode =:= undefined -> PFnode;
                                 true -> NFnode
                              end,
                          error =
                              if NFerror =:= undefined -> PFerror;
                                 true -> NFerror
                              end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'xgame.process_msg' -> 'v_msg_xgame.process_msg'(Msg, [MsgName], TrUserData);
        'xgame.pb_mfa' -> 'v_msg_xgame.pb_mfa'(Msg, [MsgName], TrUserData);
        'xgame.rpc_params' -> 'v_msg_xgame.rpc_params'(Msg, [MsgName], TrUserData);
        'xgame.req_message' -> 'v_msg_xgame.req_message'(Msg, [MsgName], TrUserData);
        'xgame.reply_message' -> 'v_msg_xgame.reply_message'(Msg, [MsgName], TrUserData);
        'xgame.req_verify' -> 'v_msg_xgame.req_verify'(Msg, [MsgName], TrUserData);
        'xgame.reply_verify' -> 'v_msg_xgame.reply_verify'(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,'v_submsg_xgame.process_msg'/3}).
-dialyzer({nowarn_function,'v_submsg_xgame.process_msg'/3}).
'v_submsg_xgame.process_msg'(Msg, Path, TrUserData) -> 'v_msg_xgame.process_msg'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_xgame.process_msg'/3}).
-dialyzer({nowarn_function,'v_msg_xgame.process_msg'/3}).
'v_msg_xgame.process_msg'(#'xgame.process_msg'{source = F1, target = F2, params = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [source | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [target | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> 'v_submsg_xgame.rpc_params'(F3, [params | Path], TrUserData)
    end,
    ok;
'v_msg_xgame.process_msg'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'xgame.process_msg'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_xgame.pb_mfa'/3}).
-dialyzer({nowarn_function,'v_submsg_xgame.pb_mfa'/3}).
'v_submsg_xgame.pb_mfa'(Msg, Path, TrUserData) -> 'v_msg_xgame.pb_mfa'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_xgame.pb_mfa'/3}).
-dialyzer({nowarn_function,'v_msg_xgame.pb_mfa'/3}).
'v_msg_xgame.pb_mfa'(#'xgame.pb_mfa'{module = F1, function = F2, args = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [module | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [function | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> 'v_submsg_xgame.rpc_params'(F3, [args | Path], TrUserData)
    end,
    ok;
'v_msg_xgame.pb_mfa'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'xgame.pb_mfa'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_xgame.rpc_params'/3}).
-dialyzer({nowarn_function,'v_submsg_xgame.rpc_params'/3}).
'v_submsg_xgame.rpc_params'(Msg, Path, TrUserData) -> 'v_msg_xgame.rpc_params'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_xgame.rpc_params'/3}).
-dialyzer({nowarn_function,'v_msg_xgame.rpc_params'/3}).
'v_msg_xgame.rpc_params'(#'xgame.rpc_params'{msgName = F1, payload = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [msgName | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [payload | Path], TrUserData)
    end,
    ok;
'v_msg_xgame.rpc_params'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'xgame.rpc_params'}, X, Path).

-compile({nowarn_unused_function,'v_msg_xgame.req_message'/3}).
-dialyzer({nowarn_function,'v_msg_xgame.req_message'/3}).
'v_msg_xgame.req_message'(#'xgame.req_message'{node_msg = F1, process_msg = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_submsg_xgame.pb_mfa'(F1, [node_msg | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> 'v_submsg_xgame.process_msg'(F2, [process_msg | Path], TrUserData)
    end,
    ok;
'v_msg_xgame.req_message'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'xgame.req_message'}, X, Path).

-compile({nowarn_unused_function,'v_msg_xgame.reply_message'/3}).
-dialyzer({nowarn_function,'v_msg_xgame.reply_message'/3}).
'v_msg_xgame.reply_message'(#'xgame.reply_message'{msgName = F1, payload = F2, error = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [msgName | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [payload | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [error | Path], TrUserData)
    end,
    ok;
'v_msg_xgame.reply_message'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'xgame.reply_message'}, X, Path).

-compile({nowarn_unused_function,'v_msg_xgame.req_verify'/3}).
-dialyzer({nowarn_function,'v_msg_xgame.req_verify'/3}).
'v_msg_xgame.req_verify'(#'xgame.req_verify'{node = F1, cookie = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [node | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [cookie | Path], TrUserData)
    end,
    ok;
'v_msg_xgame.req_verify'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'xgame.req_verify'}, X, Path).

-compile({nowarn_unused_function,'v_msg_xgame.reply_verify'/3}).
-dialyzer({nowarn_function,'v_msg_xgame.reply_verify'/3}).
'v_msg_xgame.reply_verify'(#'xgame.reply_verify'{node = F1, error = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [node | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [error | Path], TrUserData)
    end,
    ok;
'v_msg_xgame.reply_verify'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'xgame.reply_verify'}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, 'xgame.process_msg'},
      [#field{name = source, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
       #field{name = target, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
       #field{name = params, fnum = 3, rnum = 4, type = {msg, 'xgame.rpc_params'}, occurrence = optional, opts = []}]},
     {{msg, 'xgame.pb_mfa'},
      [#field{name = module, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = function, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = args, fnum = 3, rnum = 4, type = {msg, 'xgame.rpc_params'}, occurrence = optional, opts = []}]},
     {{msg, 'xgame.rpc_params'}, [#field{name = msgName, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'xgame.req_message'},
      [#field{name = node_msg, fnum = 1, rnum = 2, type = {msg, 'xgame.pb_mfa'}, occurrence = optional, opts = []}, #field{name = process_msg, fnum = 2, rnum = 3, type = {msg, 'xgame.process_msg'}, occurrence = optional, opts = []}]},
     {{msg, 'xgame.reply_message'},
      [#field{name = msgName, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
       #field{name = error, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}]},
     {{msg, 'xgame.req_verify'}, [#field{name = node, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = cookie, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}]},
     {{msg, 'xgame.reply_verify'}, [#field{name = node, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = error, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}]}].


get_msg_names() -> ['xgame.process_msg', 'xgame.pb_mfa', 'xgame.rpc_params', 'xgame.req_message', 'xgame.reply_message', 'xgame.req_verify', 'xgame.reply_verify'].


get_group_names() -> [].


get_msg_or_group_names() -> ['xgame.process_msg', 'xgame.pb_mfa', 'xgame.rpc_params', 'xgame.req_message', 'xgame.reply_message', 'xgame.req_verify', 'xgame.reply_verify'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def('xgame.process_msg') ->
    [#field{name = source, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
     #field{name = target, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
     #field{name = params, fnum = 3, rnum = 4, type = {msg, 'xgame.rpc_params'}, occurrence = optional, opts = []}];
find_msg_def('xgame.pb_mfa') ->
    [#field{name = module, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = function, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = args, fnum = 3, rnum = 4, type = {msg, 'xgame.rpc_params'}, occurrence = optional, opts = []}];
find_msg_def('xgame.rpc_params') -> [#field{name = msgName, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}];
find_msg_def('xgame.req_message') ->
    [#field{name = node_msg, fnum = 1, rnum = 2, type = {msg, 'xgame.pb_mfa'}, occurrence = optional, opts = []}, #field{name = process_msg, fnum = 2, rnum = 3, type = {msg, 'xgame.process_msg'}, occurrence = optional, opts = []}];
find_msg_def('xgame.reply_message') ->
    [#field{name = msgName, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = payload, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
     #field{name = error, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []}];
find_msg_def('xgame.req_verify') -> [#field{name = node, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = cookie, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}];
find_msg_def('xgame.reply_verify') -> [#field{name = node, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = error, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"xgame.process_msg">>) -> 'xgame.process_msg';
fqbin_to_msg_name(<<"xgame.pb_mfa">>) -> 'xgame.pb_mfa';
fqbin_to_msg_name(<<"xgame.rpc_params">>) -> 'xgame.rpc_params';
fqbin_to_msg_name(<<"xgame.req_message">>) -> 'xgame.req_message';
fqbin_to_msg_name(<<"xgame.reply_message">>) -> 'xgame.reply_message';
fqbin_to_msg_name(<<"xgame.req_verify">>) -> 'xgame.req_verify';
fqbin_to_msg_name(<<"xgame.reply_verify">>) -> 'xgame.reply_verify';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('xgame.process_msg') -> <<"xgame.process_msg">>;
msg_name_to_fqbin('xgame.pb_mfa') -> <<"xgame.pb_mfa">>;
msg_name_to_fqbin('xgame.rpc_params') -> <<"xgame.rpc_params">>;
msg_name_to_fqbin('xgame.req_message') -> <<"xgame.req_message">>;
msg_name_to_fqbin('xgame.reply_message') -> <<"xgame.reply_message">>;
msg_name_to_fqbin('xgame.req_verify') -> <<"xgame.req_verify">>;
msg_name_to_fqbin('xgame.reply_verify') -> <<"xgame.reply_verify">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> xgame.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "rpc.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["rpc.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["rpc"].


get_msg_containment("rpc") -> ['xgame.pb_mfa', 'xgame.process_msg', 'xgame.reply_message', 'xgame.reply_verify', 'xgame.req_message', 'xgame.req_verify', 'xgame.rpc_params'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("rpc") -> xgame;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("rpc") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("rpc") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("rpc") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"xgame.pb_mfa">>) -> "rpc";
get_proto_by_msg_name_as_fqbin(<<"xgame.rpc_params">>) -> "rpc";
get_proto_by_msg_name_as_fqbin(<<"xgame.req_message">>) -> "rpc";
get_proto_by_msg_name_as_fqbin(<<"xgame.reply_message">>) -> "rpc";
get_proto_by_msg_name_as_fqbin(<<"xgame.process_msg">>) -> "rpc";
get_proto_by_msg_name_as_fqbin(<<"xgame.req_verify">>) -> "rpc";
get_proto_by_msg_name_as_fqbin(<<"xgame.reply_verify">>) -> "rpc";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"xgame">>) -> ["rpc"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.20.0".

gpb_version_as_list() ->
    [4,20,0].

gpb_version_source() ->
    "file".
