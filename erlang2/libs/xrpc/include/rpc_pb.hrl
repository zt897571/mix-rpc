%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.20.0

-ifndef(rpc_pb).
-define(rpc_pb, true).

-define(rpc_pb_gpb_version, "4.20.0").


-ifndef('XGAME.PROCESS_MSG_PB_H').
-define('XGAME.PROCESS_MSG_PB_H', true).
-record('xgame.process_msg',
        {source = <<>>          :: iodata() | undefined, % = 1, optional
         target = <<>>          :: iodata() | undefined, % = 2, optional
         params = undefined     :: rpc_pb:'xgame.rpc_params'() | undefined % = 3, optional
        }).
-endif.

-ifndef('XGAME.PB_MFA_PB_H').
-define('XGAME.PB_MFA_PB_H', true).
-record('xgame.pb_mfa',
        {module = []            :: unicode:chardata() | undefined, % = 1, optional
         function = []          :: unicode:chardata() | undefined, % = 2, optional
         args = undefined       :: rpc_pb:'xgame.rpc_params'() | undefined % = 3, optional
        }).
-endif.

-ifndef('XGAME.RPC_PARAMS_PB_H').
-define('XGAME.RPC_PARAMS_PB_H', true).
-record('xgame.rpc_params',
        {msgName = []           :: unicode:chardata() | undefined, % = 1, optional
         payload = <<>>         :: iodata() | undefined % = 2, optional
        }).
-endif.

-ifndef('XGAME.REQ_MESSAGE_PB_H').
-define('XGAME.REQ_MESSAGE_PB_H', true).
-record('xgame.req_message',
        {node_msg = undefined   :: rpc_pb:'xgame.pb_mfa'() | undefined, % = 1, optional
         process_msg = undefined :: rpc_pb:'xgame.process_msg'() | undefined % = 2, optional
        }).
-endif.

-ifndef('XGAME.REPLY_MESSAGE_PB_H').
-define('XGAME.REPLY_MESSAGE_PB_H', true).
-record('xgame.reply_message',
        {msgName = []           :: unicode:chardata() | undefined, % = 1, optional
         payload = <<>>         :: iodata() | undefined, % = 2, optional
         error = []             :: unicode:chardata() | undefined % = 3, optional
        }).
-endif.

-ifndef('XGAME.REQ_VERIFY_PB_H').
-define('XGAME.REQ_VERIFY_PB_H', true).
-record('xgame.req_verify',
        {node = []              :: unicode:chardata() | undefined, % = 1, optional
         cookie = []            :: unicode:chardata() | undefined % = 2, optional
        }).
-endif.

-ifndef('XGAME.REPLY_VERIFY_PB_H').
-define('XGAME.REPLY_VERIFY_PB_H', true).
-record('xgame.reply_verify',
        {node = []              :: unicode:chardata() | undefined, % = 1, optional
         error = []             :: unicode:chardata() | undefined % = 2, optional
        }).
-endif.

-endif.
